/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SampleOnChainOracleInterface extends ethers.utils.Interface {
  functions: {
    "setProviderParameter(bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "initializeCurve(bytes32,int256[])": FunctionFragment;
    "receive(uint256,string,bytes32,bytes32[],bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "setEndpointParams(bytes32,bytes32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "setProviderParameter",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initializeCurve",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receive",
    values: [BigNumberish, string, BytesLike, BytesLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndpointParams",
    values: [BytesLike, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "setProviderParameter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeCurve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndpointParams",
    data: BytesLike
  ): Result;

  events: {
    "RecievedQuery(string,bytes32,bytes32[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RecievedQuery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SampleOnChainOracle extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SampleOnChainOracleInterface;

  functions: {
    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initializeCurve(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeCurve(bytes32,int256[])"(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  setProviderParameter(
    key: BytesLike,
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProviderParameter(bytes32,bytes)"(
    key: BytesLike,
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  initializeCurve(
    specifier: BytesLike,
    curve: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeCurve(bytes32,int256[])"(
    specifier: BytesLike,
    curve: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  receive(
    id: BigNumberish,
    userQuery: string,
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    onchainSubscriber: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "receive(uint256,string,bytes32,bytes32[],bool)"(
    id: BigNumberish,
    userQuery: string,
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    onchainSubscriber: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setEndpointParams(
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setEndpointParams(bytes32,bytes32[])"(
    endpoint: BytesLike,
    endpointParams: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    initializeCurve(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "initializeCurve(bytes32,int256[])"(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    RecievedQuery(query: null, endpoint: null, params: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    initializeCurve(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initializeCurve(bytes32,int256[])"(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setProviderParameter(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProviderParameter(bytes32,bytes)"(
      key: BytesLike,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initializeCurve(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeCurve(bytes32,int256[])"(
      specifier: BytesLike,
      curve: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    receive(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "receive(uint256,string,bytes32,bytes32[],bool)"(
      id: BigNumberish,
      userQuery: string,
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      onchainSubscriber: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setEndpointParams(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setEndpointParams(bytes32,bytes32[])"(
      endpoint: BytesLike,
      endpointParams: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
